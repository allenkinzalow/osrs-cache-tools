package com.kinztech.cache.sql.schema

import org.jetbrains.exposed.sql.Table

object Npcs: Table() {
    val id = integer("id").primaryKey()
    val name = varchar("name", length = 255).default("")
    val combatLevel = integer("combat_level").nullable()
    val transformVarbit = integer("transform_varbit").nullable()
    val transformVarp = integer("transform_varp").nullable()
    val isInteractable = bool("is_interactable").default(true)
    val drawMapDot = bool("draw_map_dot").default(true)
    val isClickable = bool("is_clickable").default(true)
    val rotation = integer("rotation").default(32)
    val headIcon = integer("head_icon").nullable()
    val options = varchar("options", length=255).nullable()
    val stanceAnimation = integer("stance_animation").nullable()
    val walkAnimation = integer("walk_animation").nullable()
    val walkRightAnimation = integer("walk_right_animation").nullable()
    val walkLeftAnimation = integer("walk_left_animation").nullable()
    val walkBackAnimation = integer("walk_back_animation").nullable()
    val turnLeftAnimation = integer("turn_left_animation").nullable()
    val turnRightAnimation = integer("turn_right_animation").nullable()
    val colorFind = text("color_find").nullable()
    val colorReplace = text("color_replace").nullable()
    val textureFind = text("texture_find").nullable()
    val textureReplace = text("texture_replace").nullable()
    val models = text("models").nullable()
    val models2 = text("models2").nullable()
    val resizeX = integer("resize_x").default(128)
    val resizeY = integer("resize_y").default(128)
    val contrast = integer("contrast").default(0)
    val ambient = integer("ambient").default(0)
    val hasRenderPriority = bool("has_render_priority").default(false)
    val transforms = text("transforms").nullable()
    val isFollower = bool("is_follower").default(false)
    val params = text("params").nullable()

    val incomplete = bool("incomplete").nullable()
    val members = bool("members").nullable()
    val releaseDate = varchar("release_date", length = 255).nullable()
    val hitpoints = integer("hitpoints").nullable()
    val maxHit = integer("max_hit").nullable()
    val attackType = text("attack_type").nullable()
    val attackSpeed = integer("attack_speed").nullable()
    val aggressive = bool("aggressive").nullable()
    val poisonous = bool("poisonous").nullable()
    val immune_poison = bool("immune_poison").nullable()
    val immune_venom = bool("immune_venom").nullable()
    val attributes = text("attributes").nullable()
    val category = text("category").nullable()
    val slayerMonster = bool("slayer_monster").default(false).nullable()
    val slayerLevel = integer("slayer_level").nullable()
    val slayerXP = double("slayer_xp").nullable()
    val slayerMasters = text("slayer_masters").nullable()
    val duplicate = bool("duplicate").nullable()
    val examine = varchar("examine", length=255).nullable()
    val attackLevel = integer("attack_level").nullable()
    val strengthLevel = integer("strength_level").nullable()
    val defenceLevel = integer("defence_level").nullable()
    val magicLevel = integer("magic_level").nullable()
    val rangedLevel = integer("ranged_level").nullable()
    val attackStab = integer("attack_stab").nullable()
    val attackSlash = integer("attack_slash").nullable()
    val attackCrush = integer("attack_crush").nullable()
    val attackMagic = integer("attack_magic").nullable()
    val attackRanged = integer("attack_ranged").nullable()
    val defenceStab = integer("defence_stab").nullable()
    val defenceSlash = integer("defence_slash").nullable()
    val defenceCrush = integer("defence_crush").nullable()
    val defenceMagic = integer("defence_magic").nullable()
    val defenceRanged = integer("defence_ranged").nullable()
    val attackAccuracy = integer("attack_accuracy").nullable()
    val meleeStrength = integer("melee_strength").nullable()
    val rangedStrength = integer("ranged_strength").nullable()
    val magicDamage = integer("magic_damage").nullable()
    val rareDropTable = bool("rare_drop_table").nullable()
    val attackAnimation = integer("attack_animation").nullable()
    val blockAnimation = integer("block_animation").nullable()
    val deathAnimation = text("death_animation").nullable()


}