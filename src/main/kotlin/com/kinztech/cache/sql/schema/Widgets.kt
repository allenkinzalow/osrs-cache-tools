package com.kinztech.cache.sql.schema

import org.jetbrains.exposed.sql.Table

object Widgets: Table() {
    val id = integer("id").primaryKey()
    val isIf3 = bool("is_if_3").default(false)
    val type = integer("type").default(0)
    val menuType = integer("menu_type").default(0)
    val contentType = integer("content_type").default(0)
    val originalX = integer("original_x").default(0)
    val originalY = integer("original_y").default(0)
    val originalWidth = integer("original_width").default(0)
    val originalHeight = integer("original_height").default(0)
    val opacity = integer("opacity").default(0)
    val parentId = integer("parent_id").nullable()
    val hoverSiblingId = integer("hover_sibling_id").nullable()
    val scrollWidth = integer("scroll_width").default(0)
    val scrollHeight = integer("scroll_height").default(0)
    val isHidden = bool("hidden").default(false)
    val clickMask = integer("click_mask").default(0)
    val xPitch = integer("x_pitch").default(0)
    val yPitch = integer("y_pitch").default(0)
    val xOffsets = text("x_offsets").nullable()
    val yOffsets = text("t_offsets").nullable()
    val sprites = text("sprites").nullable()
    val configActions = text("config_actions").nullable()
    val isFilled = bool("filled").default(false)
    val xTextAlignment = integer("x_text_alignment").default(0)
    val yTextAlignment = integer("y_text_alignment").default(0)
    val lineHeight = integer("line_height").default(0)
    val fontId = integer("font_id").nullable()
    val textShadowed = bool("text_shadowed").default(false)
    val text = text("text").nullable()
    val alternateText = text("alternate_text").nullable()
    val textColor = integer("text_color").default(0)
    val alternateTextColor = integer("alternate_text_color").default(0)
    val hoveredTextColor = integer("hovered_text_color").default(0)
    val spriteId = integer("sprite_id").nullable()
    val alternateSpriteId = integer("alternate_sprite_id").nullable()
    val modelType = integer("model_type").default(1)
    val modelId = integer("model_id").nullable()
    val alternateModelId = integer("alternate_model_id").nullable()
    val animationId = integer("animation_id").nullable()
    val alternateAnimationId = integer("alternate_animation_id").nullable()
    val modelZoom = integer("model_zoom").default(100)
    val rotationX = integer("rotation_x").default(0)
    val rotationY = integer("rotation_y").default(0)
    val rotationZ = integer("rotation_z").default(0)
    val targetVerb = varchar("target_verb", length=128).default("")
    val spellName = varchar("spell_name", length=128).default("")
    val tooltip = varchar("tooltip", length=128).default("")
    val widthMode = integer("width_mode").default(0)
    val heightMode = integer("height_mode").default(0)
    val xPositionMode = integer("x_pos_mode").default(0)
    val yPositionMode = integer("y_pos_mode").default(0)
    val noClickThrough = bool("no_click_through").default(false)
    val textureId = integer("texture_id").default(0)
    val spriteTiling = bool("sprite_tiling").default(false)
    val borderType = integer("border_type").default(0)
    val shadowColor = integer("shadow_color").default(0)
    val flippedVertically = bool("flipped_vertically").default(false).nullable()
    val flippedHorizontally = bool("flipped_horizontally").default(false).nullable()
    val offsetX2d = integer("offset_x_2d").default(0)
    val offsetY2d = integer("offset_y_2d").default(0)
    val orthogonal = bool("orthogonal").default(false)
    val modelHeightOverride = integer("model_height_override").default(0)
    val lineWidth = integer("line_width").default(0)
    val lineDirection = bool("line_direction").default(false)
    val name = text("name").nullable()
    val actions = text("actions").nullable()
    val dragDeadZone = integer("drag_dead_zone").default(0)
    val dragDeadTime = integer("drag_dead_time").default(0)
    val dragRenderBehavior = bool("drag_render_behavior").default(false)
    val clientScripts = text("client_scripts").nullable()
    val onLoadListener = text("load_listener").nullable()
    val onMouseOverListener = text("mouse_over_listener").nullable()
    val onMouseLeaveListener = text("mouse_leave_listener").nullable()
    val onTargetLeaveListener = text("target_leave_listener").nullable()
    val onTargetEnterListener = text("target_enter_listener").nullable()
    val onVarTransmitListener = text("var_transmit_listener").nullable()
    val onInvTransmitListener = text("inv_transmit_listener").nullable()
    val onStatTransmitListener = text("stat_transmit_listener").nullable()
    val onTimerListener = text("timer_listener").nullable()
    val onOpListener = text("op_listener").nullable()
    val onMouseRepeatListener = text("mouse_repeat_listener").nullable()
    val onClickListener = text("click_listener").nullable()
    val onClickRepeatListener = text("clcik_repeat_listener").nullable()
    val onReleaseListener = text("release_listener").nullable()
    val onHoldListener = text("hold_listener").nullable()
    val onDragListener = text("drag_listener").nullable()
    val onDragCompleteListener = text("drag_complete_listener").nullable()
    val onScrollWheelListener = text("scrollwheel_listener").nullable()
    val varTransmitTriggers = text("var_transmit_trigger").nullable()
    val invTransmitTriggers = text("inv_transmit_trigger").nullable()
    val statTransmitTriggers = text("stat_transmit_trigger").nullable()

}